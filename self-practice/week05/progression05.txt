//  • Write a function addProperty(obj, key, value) that adds a new
// property to an object and returns the updated object.
//  • Output
//  • console.log(addProperty({ name: 'John' }, 'age', 25))
// // { name: 'John', age: 25 }
//  • console.log(addProperty({}, 'city', 'New York’))
// // { city: 'New York' }
function addProperty(obj, key, value) {
    obj[key] = value;     -> นำ parameter ที่รับมาในแต่ละตัว มายัดใส่ใน obj ที่รับมาได้ param ตัวแรก
    return obj;
}
console.log(addProperty({ name: 'John' }, 'age', 25))
console.log(addProperty({}, 'city', 'New York'))

//  • Write a function mergeObject(obj1, obj2) and return merges two
// objects.
//  • Output
//  • console.log(mergeObject({ name: 'John', age: 25 }, { city: 'New York' }))
// //{ name: 'John', age: 25, city: 'New York' }
//  • console.log(mergeObject({ name: 'Jane' }, { age: 30, country: 'USA' }))
// //{ name: 'Jane', age: 30, country: 'USA' }
function mergeObject(obj1, obj2) {
    let mergeObj = { ...obj1, ...obj2 };   -> ใช้ spread operator ในการรวม obj 2 ตัวมารวมกันเป็นหนึ่ง
    return mergeObj;
}
console.log(mergeObject({ name: 'John', age: 25 }, { city: 'New York' }))
console.log(mergeObject({ name: 'Jane' }, { age: 30, country: 'USA' }))

//  • Write a function getFreqOfWords(sentence) that returns an object with keys representing
// unique words in lowercase and values representing the frequency of occurrences of each
// word with ignore case in the sentence. If the input string is null or undefined, return
// undefined.
//  • Output
//  • console.log(getFreqOfWords('Today is present and present is your gift'))
//  //{ today: 1, is: 2, present: 2, and: 1, your: 1, gift: 1 }
//  • console.log(getFreqOfWords('Do you best just do it’))
//  //{ do: 2, you: 1, best: 1, just: 1, it: 1 }
//  • console.log(getFreqOfWords(null)) //undefined
//  • console.log(getFreqOfWords(undefined)) //undefined
function getFreqOfWords(sentence) {
    if (sentence === null || sentence === undefined) {
        return undefined;
    } else {                                          -> เช็ค err case ก่อนเลย ถ้าหลุดก็หลุดก่อน ต่อมาก็ถ้าเป็น case ปกติก็จะทำการสั่งให้ทุกตัวเป็นตัวเล็ก
                                                         แล้วก็แยก str แต่ละตัวโดยใช้ space ในการแบ่ง แล้วก็ใช้ func reduce ในการจัดการ obj ให้
                                                         นับจำนวนคำแต่ละตัวเมื่อเสร็จแล้วก็ return ค่าออกไปใช้
        return sentence
            .toLowerCase()
            .split(" ")
            .reduce((obj, word) => {
                obj[word] = (obj[word] || 0) + 1;
                return obj;
            }, {});
    }
}
console.log(getFreqOfWords("Today is present and present is your gift"));
console.log(getFreqOfWords("Do you best just do it"));
console.log(getFreqOfWords(null)); //undefined
console.log(getFreqOfWords(undefined)); //undefined

//  • Write a function extractAndRename(obj) that extracts properties
// name and age from an object, renames them to fullName and
// yearsOld, and returns a new object with these properties.
//  • Output
//  • console.log(extractAndRename({ name: 'John', age: 25, city: 'New York' }))
// • // { fullName: 'John', yearsOld: 25 }
//  • console.log(extractAndRename({ name: 'Jane', age: 30 }))
// • // { fullName: 'Jane', yearsOld: 30 }
function extractAndRename(obj) {
    const { name: fullName, age: yearsOld } = obj;             -> ใช้การ destructuring เพื่อ ruturn value ของแต่ละตัวออกมา
    return { fullName, yearsOld };
}

console.log(extractAndRename({ name: "John", age: 25, city: "New York" }));
console.log(extractAndRename({ name: "Jane", age: 30 }));

//  • Write a function mergeAndDestructure(obj1, obj2) that merges two
// objects using the spread operator, and then destructures the merged
// object to extract specific properties. Return an object with the extracted
// properties.
//  • Output
//  • console.log(mergeAndDestructure({ name: 'John', age: 25 }, { city: 'New York' }))
// // { name: 'John', age: 25 }
//  • console.log(mergeAndDestructure({ name: 'Jane' }, { age: 30, country: 'USA' }))
// // { name: 'Jane', age: 30 }
function mergeAndDestructure(obj1, obj2) {
    const merged = { ...obj1, ...obj2 };
    const { name, age } = merged;                 -> รวม obj โดยใช้ spread operator ก่อน แล้วค่อยนำมา destructuring เพื่อนำ value return ออก
    return { name, age };
}

console.log(
    mergeAndDestructure({ name: "John", age: 25 }, { city: "New York" })
);
console.log(mergeAndDestructure({ name: "Jane" }, { age: 30, country: "USA" }));

//  • Write a function removeDuplicateWords(sentence) that takes a string as input and returns a new
// string with all duplicate words removed, while preserving the order of the first occurrence of
// each word. The function should be case insensitive, but the output should maintain the original
// casing. If the input is null, undefined, or an empty string, return an empty string.
//  • Output:
//  removeDuplicateWords("This is a test This test is easy.")  // "This is a test easy."
//  removeDuplicateWords("Hello hello HELLO world!") // "Hello world!"
//  removeDuplicateWords("One two two three three three") // "One two three"
//  removeDuplicateWords("") // ""
//  removeDuplicateWords(null) // ""
function removeDuplicateWords(sentence) {
    if (!sentence) return "";
    const seen = [];
    return sentence
        .split(" ")
        .filter((word) => {
            const lower = word.toLowerCase();         -> ขั้นแรกจะตั้งให้ทุกตัวเป็นตัวพิมพ์เล็กก่อน จากนั้นก็เช็คว่ามีตัวนั้นอยู่ใน str ที่รับค่าเข้ามารึป่าว ถ้ามีก็ไม่ต้องใส่คำนั้นในผลลัพธ์สุดท้าย
                                                          แต่ถ้าไม่มีคำนั้นก็ push คำนั้นเข้าไป จากนั้นก็ทำการเชื่อมค่าแต่ละตัวใน arr ให้เป็น str โดยใช้ join(" ") 
            if (seen.includes(lower)) return false;
            seen.push(lower);
            return true;
        })
        .join(" ");
}

console.log(removeDuplicateWords("This is a test This test is easy."));
console.log(removeDuplicateWords("Hello hello HELLO world!"));
console.log(removeDuplicateWords("One two two three three three"));
console.log(removeDuplicateWords(""));
console.log(removeDuplicateWords(null));

//  • Write a function findValue(arr) that takes an array of numbers and
// returns an object with the following properties:
//  • min: the minimum value in the array
//  • max: the maximum value in the array
//  • sum: the sum of all the values in the array
//  • avg: the average of all the values in the array
//  For example, given the array [1, 2, 3, 4, 5], the function should return:
//  { min: 1, max: 5, sum: 15, avg: 3 }
function findValue(arr) {
    const min = Math.min(...arr);
    const max = Math.max(...arr);
    const sum = arr.reduce((a, b) => a + b, 0);        -> กำหนดตัวแปรแต่ละตัวขึ้นมาเลย โดยในละตัวก็จะเช็คค่าที่รับเข้ามา เช่น min ตัวไหนน้อยสุดก็รับไว้
                                                          หรือ max ถ้าตัวไหนมาสุดก็เก็บค่าไว้ สุดท้ายก็ return ไปโต้งๆของแต่ละตัวเลย
    const avg = sum / arr.length;
    return { min, max, sum, avg };
}

console.log(findValue([1, 2, 3, 4, 5]));

//  • Write a function convertToUppercase(arr) that takes an array of
// strings and returns a new array with all strings converted to
// uppercase.
//  • Sample Outputs
//  • convertToUppercase(['hello', 'world'])) // ['HELLO', 'WORLD']
//  • convertToUppercase(['javascript', 'is', 'fun'])) // ['JAVASCRIPT', 'IS', 'FUN']
function convertToUppercase(arr) {
    return arr.map((str) => str.toUpperCase());       -> ใช้ map เพื่อสร้าง arr ใหม่โดยเปลี่ยนให้ทุกตัวเป็น uppercase
}

console.log(convertToUppercase(["hello", "world"]));
console.log(convertToUppercase(["javascript", "is", "fun"]));

//  • Write a function findMax(arr) that takes an array of numbers and
// returns the maximum value using the reduce method.
//  Sample Outputs
//  • console.log(findMax([1, 2, 3, 4])) // 4
//  • console.log(findMax([10, 5, 8, 7])) // 10
function findMax(arr) {
    return arr.reduce((max, num) => (num > max ? num : max), arr[0]);     -> ใช้ reduce เพื่อหาค่าที่มากที่สุดของ arr นี้ โดยมีเงื่อไขถ้า num ปัจจุบัน
                                                                             มากกว่า max ก็ให้ num ตัวนั้นเป็น max แทน ถ้าไม่ค่า max ก็เหมือนเดิม
}

console.log(findMax([1, 2, 3, 4]));
console.log(findMax([10, 5, 8, 7]));

//  • Write a function removeFalsyValues(arr) that takes an array and
// returns a new array with all falsy values removed. Falsy values include
// 0, empty string, false, null, and undefined.
//  Sample Outputs
//  • removeFalsyValues([0, 1, false, 2, '', 3]) // [1, 2, 3]
//  • removeFalsyValues(['a', '', 'b', null, 'c']) // ['a', 'b', 'c’]
//  • removeFalsyValues([null, undefined, 'A']) // ['A']
function removeFalsyValues(arr) {
    return arr.filter(Boolean);           -> filter มันคืนค่าแค่ true กับ fasle อยู่แล้ว ดังนั้นก็ใช้มันหาเลยว่าตัวไหนจริงเท็จ ถ้าจริงก็แค่ filter ออกมาแล้วแสดงผลลัพธ์
}

console.log(removeFalsyValues([0, 1, false, 2, "", 3]));
console.log(removeFalsyValues(["a", "", "b", null, "c"]));
console.log(removeFalsyValues([null, undefined, "A"]));

//  • Write a function doubleAndFilterEvenNumbers(arr) that takes an
// array of numbers, filter out odd numbers and returns a new array
// with doubled numbers.
//  • Sample Outputs
//  • doubleAndFilterEvenNumbers([1, 2, 3, 4])) // [4, 8]
//  • doubleAndFilterEvenNumbers([5, 6, 7, 8])) // [12, 16]
function doubleAndFilterEvenNumbers(arr) {
    return arr.filter((num) => num % 2 === 0).map((num) => num * 2);  -> filter เอาค่าเลขคี่ออกก่อน แล้วก็สร้าง arr ใหม่ โดยนำค่าที่เหลืออยู่มาคูณสอง แล้วคืนค่าออก
}

console.log(doubleAndFilterEvenNumbers([1, 2, 3, 4]));
console.log(doubleAndFilterEvenNumbers([5, 6, 7, 8]));

//  • Write a function filterEvenNumbers(arr) that takes an array of
// numbers and returns a new array with only the even numbers.
//  • Sample Outputs
//  • filterEvenNumbers([1, 2, 3, 4]) // [2, 4]
//  • filterEvenNumbers([5, 6, 7, 8]) // [6, 8]
function filterEvenNumbers(arr) {
    return arr.filter((num) => num % 2 === 0);   -> ก็แค่ filter เอา ค่าเลขคู่เพื่อไปแสดงผล
}

console.log(filterEvenNumbers([1, 2, 3, 4]));
console.log(filterEvenNumbers([5, 6, 7, 8]));

//  • Write a function populateArray(length, value) that creates an array of
// given length and fills it with the specified value.
//  • Sample Outputs
//  • populateArray(3, 'a') // ['a', 'a', 'a']
//  • populateArray(5, 0) // [0, 0, 0, 0, 0]
function populateArray(length, value) {
    return Array(length).fill(value);   -> นำ param ตัวแรกกำหนดว่าจะ duplicate param ตัวที่ 2 กี่ตัว แล้วก็ใช้ fill เพื่อใส่ค่าใน arr แล้ว return
}

console.log(populateArray(3, "a"));
console.log(populateArray(5, 0));

//  • Write a function squareNumbers(arr) that takes an array of numbers
// and returns a new array with each number squared.
//  • Sample Outputs
//  • squareNumbers([1, 2, 3, 4]) // [1, 4, 9, 16]
//  • squareNumbers([5, 6]) // [25, 36]
function squareNumbers(arr) {
    return arr.map((num) => num * num);    -> ใช้ map สร้าง arr ใหม่แล้วก็ยกกำลังมัน แล้ว return ค่าออก
}

console.log(squareNumbers([1, 2, 3, 4]));
console.log(squareNumbers([5, 6]));

//  • Write a function processNumbers(arr) that takes an array of
// numbers, squares each number, filters out the even numbers, and
// returns the sum of the remaining numbers.
//  • Sample Outputs
//  • processNumbers([1, 2, 3, 4]) // 10 (1^2 + 3^2)
// • processNumbers([5, 6, 7, 8]) // 74 (5^2 + 7^2)
function processNumbers(arr) {
    return arr
        .map((num) => num * num)
        .filter((num) => num % 2 !== 0)   -> ใช้ map เพื่อสร้าง arr ใหม่ โดยยกกำลังค่าแต่ละตัว ต่อมาก็ filter เลขคู่ออก แล้วก็นำตัวที่เหลืออยู่มาบวกกันผ่าน reduce แล้วเมื่อได้ผลลัพธ์แล้วก็ return ออก 
        .reduce((a, b) => a + b, 0);
}

console.log(processNumbers([1, 2, 3, 4]));
console.log(processNumbers([5, 6, 7, 8]));
